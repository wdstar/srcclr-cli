// Code generated by go-swagger; DO NOT EDIT.

package workspaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetIssuesUsingGETParams creates a new GetIssuesUsingGETParams object
// with the default values initialized.
func NewGetIssuesUsingGETParams() *GetIssuesUsingGETParams {
	var ()
	return &GetIssuesUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetIssuesUsingGETParamsWithTimeout creates a new GetIssuesUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetIssuesUsingGETParamsWithTimeout(timeout time.Duration) *GetIssuesUsingGETParams {
	var ()
	return &GetIssuesUsingGETParams{

		timeout: timeout,
	}
}

// NewGetIssuesUsingGETParamsWithContext creates a new GetIssuesUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetIssuesUsingGETParamsWithContext(ctx context.Context) *GetIssuesUsingGETParams {
	var ()
	return &GetIssuesUsingGETParams{

		Context: ctx,
	}
}

// NewGetIssuesUsingGETParamsWithHTTPClient creates a new GetIssuesUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetIssuesUsingGETParamsWithHTTPClient(client *http.Client) *GetIssuesUsingGETParams {
	var ()
	return &GetIssuesUsingGETParams{
		HTTPClient: client,
	}
}

/*GetIssuesUsingGETParams contains all the parameters to send to the API endpoint
for the get issues using g e t operation typically these are written to a http.Request
*/
type GetIssuesUsingGETParams struct {

	/*CreatedAfter
	  Filter by issues created on or after the specified date

	*/
	CreatedAfter *strfmt.DateTime
	/*CreatedBefore
	  created_before

	*/
	CreatedBefore *strfmt.DateTime
	/*Direct
	  Filter by direct dependency

	*/
	Direct *bool
	/*ID
	  id

	*/
	ID strfmt.UUID
	/*Ignored
	  If true, show only ignored issues

	*/
	Ignored *bool
	/*Page
	  Results page you want to retrieve (0..N)

	*/
	Page *int32
	/*ProjectID
	  Filter 0 or more project IDs

	*/
	ProjectID []strfmt.UUID
	/*Search
	  Filter by issues matching the provided text search

	*/
	Search *string
	/*SeverityGt
	  Filter by issue severity greater than the provided value

	*/
	SeverityGt *float32
	/*SeverityGte
	  Filter by issue severity greater than or equal to the provided value

	*/
	SeverityGte *float32
	/*SeverityLt
	  Filter by issue severity less than the provided value

	*/
	SeverityLt *float32
	/*SeverityLte
	  Filter by issue severity less than or equal to the provided value

	*/
	SeverityLte *float32
	/*Size
	  Number of records per page

	*/
	Size *int32
	/*Sort
	  Sorting criteria in the format: property(,asc|desc). Default order is created date descending.

	*/
	Sort []string
	/*Status
	  Filter by issue status

	*/
	Status []string
	/*Type
	  Filter by issue type

	*/
	Type []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get issues using g e t params
func (o *GetIssuesUsingGETParams) WithTimeout(timeout time.Duration) *GetIssuesUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get issues using g e t params
func (o *GetIssuesUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get issues using g e t params
func (o *GetIssuesUsingGETParams) WithContext(ctx context.Context) *GetIssuesUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get issues using g e t params
func (o *GetIssuesUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get issues using g e t params
func (o *GetIssuesUsingGETParams) WithHTTPClient(client *http.Client) *GetIssuesUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get issues using g e t params
func (o *GetIssuesUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreatedAfter adds the createdAfter to the get issues using g e t params
func (o *GetIssuesUsingGETParams) WithCreatedAfter(createdAfter *strfmt.DateTime) *GetIssuesUsingGETParams {
	o.SetCreatedAfter(createdAfter)
	return o
}

// SetCreatedAfter adds the createdAfter to the get issues using g e t params
func (o *GetIssuesUsingGETParams) SetCreatedAfter(createdAfter *strfmt.DateTime) {
	o.CreatedAfter = createdAfter
}

// WithCreatedBefore adds the createdBefore to the get issues using g e t params
func (o *GetIssuesUsingGETParams) WithCreatedBefore(createdBefore *strfmt.DateTime) *GetIssuesUsingGETParams {
	o.SetCreatedBefore(createdBefore)
	return o
}

// SetCreatedBefore adds the createdBefore to the get issues using g e t params
func (o *GetIssuesUsingGETParams) SetCreatedBefore(createdBefore *strfmt.DateTime) {
	o.CreatedBefore = createdBefore
}

// WithDirect adds the direct to the get issues using g e t params
func (o *GetIssuesUsingGETParams) WithDirect(direct *bool) *GetIssuesUsingGETParams {
	o.SetDirect(direct)
	return o
}

// SetDirect adds the direct to the get issues using g e t params
func (o *GetIssuesUsingGETParams) SetDirect(direct *bool) {
	o.Direct = direct
}

// WithID adds the id to the get issues using g e t params
func (o *GetIssuesUsingGETParams) WithID(id strfmt.UUID) *GetIssuesUsingGETParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get issues using g e t params
func (o *GetIssuesUsingGETParams) SetID(id strfmt.UUID) {
	o.ID = id
}

// WithIgnored adds the ignored to the get issues using g e t params
func (o *GetIssuesUsingGETParams) WithIgnored(ignored *bool) *GetIssuesUsingGETParams {
	o.SetIgnored(ignored)
	return o
}

// SetIgnored adds the ignored to the get issues using g e t params
func (o *GetIssuesUsingGETParams) SetIgnored(ignored *bool) {
	o.Ignored = ignored
}

// WithPage adds the page to the get issues using g e t params
func (o *GetIssuesUsingGETParams) WithPage(page *int32) *GetIssuesUsingGETParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get issues using g e t params
func (o *GetIssuesUsingGETParams) SetPage(page *int32) {
	o.Page = page
}

// WithProjectID adds the projectID to the get issues using g e t params
func (o *GetIssuesUsingGETParams) WithProjectID(projectID []strfmt.UUID) *GetIssuesUsingGETParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the get issues using g e t params
func (o *GetIssuesUsingGETParams) SetProjectID(projectID []strfmt.UUID) {
	o.ProjectID = projectID
}

// WithSearch adds the search to the get issues using g e t params
func (o *GetIssuesUsingGETParams) WithSearch(search *string) *GetIssuesUsingGETParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the get issues using g e t params
func (o *GetIssuesUsingGETParams) SetSearch(search *string) {
	o.Search = search
}

// WithSeverityGt adds the severityGt to the get issues using g e t params
func (o *GetIssuesUsingGETParams) WithSeverityGt(severityGt *float32) *GetIssuesUsingGETParams {
	o.SetSeverityGt(severityGt)
	return o
}

// SetSeverityGt adds the severityGt to the get issues using g e t params
func (o *GetIssuesUsingGETParams) SetSeverityGt(severityGt *float32) {
	o.SeverityGt = severityGt
}

// WithSeverityGte adds the severityGte to the get issues using g e t params
func (o *GetIssuesUsingGETParams) WithSeverityGte(severityGte *float32) *GetIssuesUsingGETParams {
	o.SetSeverityGte(severityGte)
	return o
}

// SetSeverityGte adds the severityGte to the get issues using g e t params
func (o *GetIssuesUsingGETParams) SetSeverityGte(severityGte *float32) {
	o.SeverityGte = severityGte
}

// WithSeverityLt adds the severityLt to the get issues using g e t params
func (o *GetIssuesUsingGETParams) WithSeverityLt(severityLt *float32) *GetIssuesUsingGETParams {
	o.SetSeverityLt(severityLt)
	return o
}

// SetSeverityLt adds the severityLt to the get issues using g e t params
func (o *GetIssuesUsingGETParams) SetSeverityLt(severityLt *float32) {
	o.SeverityLt = severityLt
}

// WithSeverityLte adds the severityLte to the get issues using g e t params
func (o *GetIssuesUsingGETParams) WithSeverityLte(severityLte *float32) *GetIssuesUsingGETParams {
	o.SetSeverityLte(severityLte)
	return o
}

// SetSeverityLte adds the severityLte to the get issues using g e t params
func (o *GetIssuesUsingGETParams) SetSeverityLte(severityLte *float32) {
	o.SeverityLte = severityLte
}

// WithSize adds the size to the get issues using g e t params
func (o *GetIssuesUsingGETParams) WithSize(size *int32) *GetIssuesUsingGETParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the get issues using g e t params
func (o *GetIssuesUsingGETParams) SetSize(size *int32) {
	o.Size = size
}

// WithSort adds the sort to the get issues using g e t params
func (o *GetIssuesUsingGETParams) WithSort(sort []string) *GetIssuesUsingGETParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get issues using g e t params
func (o *GetIssuesUsingGETParams) SetSort(sort []string) {
	o.Sort = sort
}

// WithStatus adds the status to the get issues using g e t params
func (o *GetIssuesUsingGETParams) WithStatus(status []string) *GetIssuesUsingGETParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get issues using g e t params
func (o *GetIssuesUsingGETParams) SetStatus(status []string) {
	o.Status = status
}

// WithType adds the typeVar to the get issues using g e t params
func (o *GetIssuesUsingGETParams) WithType(typeVar []string) *GetIssuesUsingGETParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get issues using g e t params
func (o *GetIssuesUsingGETParams) SetType(typeVar []string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetIssuesUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CreatedAfter != nil {

		// query param created_after
		var qrCreatedAfter strfmt.DateTime
		if o.CreatedAfter != nil {
			qrCreatedAfter = *o.CreatedAfter
		}
		qCreatedAfter := qrCreatedAfter.String()
		if qCreatedAfter != "" {
			if err := r.SetQueryParam("created_after", qCreatedAfter); err != nil {
				return err
			}
		}

	}

	if o.CreatedBefore != nil {

		// query param created_before
		var qrCreatedBefore strfmt.DateTime
		if o.CreatedBefore != nil {
			qrCreatedBefore = *o.CreatedBefore
		}
		qCreatedBefore := qrCreatedBefore.String()
		if qCreatedBefore != "" {
			if err := r.SetQueryParam("created_before", qCreatedBefore); err != nil {
				return err
			}
		}

	}

	if o.Direct != nil {

		// query param direct
		var qrDirect bool
		if o.Direct != nil {
			qrDirect = *o.Direct
		}
		qDirect := swag.FormatBool(qrDirect)
		if qDirect != "" {
			if err := r.SetQueryParam("direct", qDirect); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	if o.Ignored != nil {

		// query param ignored
		var qrIgnored bool
		if o.Ignored != nil {
			qrIgnored = *o.Ignored
		}
		qIgnored := swag.FormatBool(qrIgnored)
		if qIgnored != "" {
			if err := r.SetQueryParam("ignored", qIgnored); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	var valuesProjectID []string
	for _, v := range o.ProjectID {
		valuesProjectID = append(valuesProjectID, v.String())
	}

	joinedProjectID := swag.JoinByFormat(valuesProjectID, "multi")
	// query array param project_id
	if err := r.SetQueryParam("project_id", joinedProjectID...); err != nil {
		return err
	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.SeverityGt != nil {

		// query param severity_gt
		var qrSeverityGt float32
		if o.SeverityGt != nil {
			qrSeverityGt = *o.SeverityGt
		}
		qSeverityGt := swag.FormatFloat32(qrSeverityGt)
		if qSeverityGt != "" {
			if err := r.SetQueryParam("severity_gt", qSeverityGt); err != nil {
				return err
			}
		}

	}

	if o.SeverityGte != nil {

		// query param severity_gte
		var qrSeverityGte float32
		if o.SeverityGte != nil {
			qrSeverityGte = *o.SeverityGte
		}
		qSeverityGte := swag.FormatFloat32(qrSeverityGte)
		if qSeverityGte != "" {
			if err := r.SetQueryParam("severity_gte", qSeverityGte); err != nil {
				return err
			}
		}

	}

	if o.SeverityLt != nil {

		// query param severity_lt
		var qrSeverityLt float32
		if o.SeverityLt != nil {
			qrSeverityLt = *o.SeverityLt
		}
		qSeverityLt := swag.FormatFloat32(qrSeverityLt)
		if qSeverityLt != "" {
			if err := r.SetQueryParam("severity_lt", qSeverityLt); err != nil {
				return err
			}
		}

	}

	if o.SeverityLte != nil {

		// query param severity_lte
		var qrSeverityLte float32
		if o.SeverityLte != nil {
			qrSeverityLte = *o.SeverityLte
		}
		qSeverityLte := swag.FormatFloat32(qrSeverityLte)
		if qSeverityLte != "" {
			if err := r.SetQueryParam("severity_lte", qSeverityLte); err != nil {
				return err
			}
		}

	}

	if o.Size != nil {

		// query param size
		var qrSize int32
		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {
			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}

	}

	valuesSort := o.Sort

	joinedSort := swag.JoinByFormat(valuesSort, "multi")
	// query array param sort
	if err := r.SetQueryParam("sort", joinedSort...); err != nil {
		return err
	}

	valuesStatus := o.Status

	joinedStatus := swag.JoinByFormat(valuesStatus, "multi")
	// query array param status
	if err := r.SetQueryParam("status", joinedStatus...); err != nil {
		return err
	}

	valuesType := o.Type

	joinedType := swag.JoinByFormat(valuesType, "multi")
	// query array param type
	if err := r.SetQueryParam("type", joinedType...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
