// Code generated by go-swagger; DO NOT EDIT.

package workspaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetWorkspacesUsingGETParams creates a new GetWorkspacesUsingGETParams object
// with the default values initialized.
func NewGetWorkspacesUsingGETParams() *GetWorkspacesUsingGETParams {
	var ()
	return &GetWorkspacesUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetWorkspacesUsingGETParamsWithTimeout creates a new GetWorkspacesUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetWorkspacesUsingGETParamsWithTimeout(timeout time.Duration) *GetWorkspacesUsingGETParams {
	var ()
	return &GetWorkspacesUsingGETParams{

		timeout: timeout,
	}
}

// NewGetWorkspacesUsingGETParamsWithContext creates a new GetWorkspacesUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetWorkspacesUsingGETParamsWithContext(ctx context.Context) *GetWorkspacesUsingGETParams {
	var ()
	return &GetWorkspacesUsingGETParams{

		Context: ctx,
	}
}

// NewGetWorkspacesUsingGETParamsWithHTTPClient creates a new GetWorkspacesUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetWorkspacesUsingGETParamsWithHTTPClient(client *http.Client) *GetWorkspacesUsingGETParams {
	var ()
	return &GetWorkspacesUsingGETParams{
		HTTPClient: client,
	}
}

/*GetWorkspacesUsingGETParams contains all the parameters to send to the API endpoint
for the get workspaces using g e t operation typically these are written to a http.Request
*/
type GetWorkspacesUsingGETParams struct {

	/*FilterLibrary
	  The library name filter

	*/
	FilterLibrary []string
	/*FilterLicense
	  The license name filter

	*/
	FilterLicense []string
	/*FilterProject
	  The project name filter

	*/
	FilterProject []string
	/*FilterVulnerability
	  The vulnerability title filter

	*/
	FilterVulnerability []string
	/*FilterWorkspace
	  The workspace name filter

	*/
	FilterWorkspace []string
	/*Page
	  The page of results that you want to retrieve (0..N).

	*/
	Page *int32
	/*Size
	  The number of records per page

	*/
	Size *int32
	/*Sort
	  Sorting criteria in the format: property(asc|desc). The default order is ascending.

	*/
	Sort []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get workspaces using g e t params
func (o *GetWorkspacesUsingGETParams) WithTimeout(timeout time.Duration) *GetWorkspacesUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get workspaces using g e t params
func (o *GetWorkspacesUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get workspaces using g e t params
func (o *GetWorkspacesUsingGETParams) WithContext(ctx context.Context) *GetWorkspacesUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get workspaces using g e t params
func (o *GetWorkspacesUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get workspaces using g e t params
func (o *GetWorkspacesUsingGETParams) WithHTTPClient(client *http.Client) *GetWorkspacesUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get workspaces using g e t params
func (o *GetWorkspacesUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilterLibrary adds the filterLibrary to the get workspaces using g e t params
func (o *GetWorkspacesUsingGETParams) WithFilterLibrary(filterLibrary []string) *GetWorkspacesUsingGETParams {
	o.SetFilterLibrary(filterLibrary)
	return o
}

// SetFilterLibrary adds the filterLibrary to the get workspaces using g e t params
func (o *GetWorkspacesUsingGETParams) SetFilterLibrary(filterLibrary []string) {
	o.FilterLibrary = filterLibrary
}

// WithFilterLicense adds the filterLicense to the get workspaces using g e t params
func (o *GetWorkspacesUsingGETParams) WithFilterLicense(filterLicense []string) *GetWorkspacesUsingGETParams {
	o.SetFilterLicense(filterLicense)
	return o
}

// SetFilterLicense adds the filterLicense to the get workspaces using g e t params
func (o *GetWorkspacesUsingGETParams) SetFilterLicense(filterLicense []string) {
	o.FilterLicense = filterLicense
}

// WithFilterProject adds the filterProject to the get workspaces using g e t params
func (o *GetWorkspacesUsingGETParams) WithFilterProject(filterProject []string) *GetWorkspacesUsingGETParams {
	o.SetFilterProject(filterProject)
	return o
}

// SetFilterProject adds the filterProject to the get workspaces using g e t params
func (o *GetWorkspacesUsingGETParams) SetFilterProject(filterProject []string) {
	o.FilterProject = filterProject
}

// WithFilterVulnerability adds the filterVulnerability to the get workspaces using g e t params
func (o *GetWorkspacesUsingGETParams) WithFilterVulnerability(filterVulnerability []string) *GetWorkspacesUsingGETParams {
	o.SetFilterVulnerability(filterVulnerability)
	return o
}

// SetFilterVulnerability adds the filterVulnerability to the get workspaces using g e t params
func (o *GetWorkspacesUsingGETParams) SetFilterVulnerability(filterVulnerability []string) {
	o.FilterVulnerability = filterVulnerability
}

// WithFilterWorkspace adds the filterWorkspace to the get workspaces using g e t params
func (o *GetWorkspacesUsingGETParams) WithFilterWorkspace(filterWorkspace []string) *GetWorkspacesUsingGETParams {
	o.SetFilterWorkspace(filterWorkspace)
	return o
}

// SetFilterWorkspace adds the filterWorkspace to the get workspaces using g e t params
func (o *GetWorkspacesUsingGETParams) SetFilterWorkspace(filterWorkspace []string) {
	o.FilterWorkspace = filterWorkspace
}

// WithPage adds the page to the get workspaces using g e t params
func (o *GetWorkspacesUsingGETParams) WithPage(page *int32) *GetWorkspacesUsingGETParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get workspaces using g e t params
func (o *GetWorkspacesUsingGETParams) SetPage(page *int32) {
	o.Page = page
}

// WithSize adds the size to the get workspaces using g e t params
func (o *GetWorkspacesUsingGETParams) WithSize(size *int32) *GetWorkspacesUsingGETParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the get workspaces using g e t params
func (o *GetWorkspacesUsingGETParams) SetSize(size *int32) {
	o.Size = size
}

// WithSort adds the sort to the get workspaces using g e t params
func (o *GetWorkspacesUsingGETParams) WithSort(sort []string) *GetWorkspacesUsingGETParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get workspaces using g e t params
func (o *GetWorkspacesUsingGETParams) SetSort(sort []string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *GetWorkspacesUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesFilterLibrary := o.FilterLibrary

	joinedFilterLibrary := swag.JoinByFormat(valuesFilterLibrary, "multi")
	// query array param filter[library]
	if err := r.SetQueryParam("filter[library]", joinedFilterLibrary...); err != nil {
		return err
	}

	valuesFilterLicense := o.FilterLicense

	joinedFilterLicense := swag.JoinByFormat(valuesFilterLicense, "multi")
	// query array param filter[license]
	if err := r.SetQueryParam("filter[license]", joinedFilterLicense...); err != nil {
		return err
	}

	valuesFilterProject := o.FilterProject

	joinedFilterProject := swag.JoinByFormat(valuesFilterProject, "multi")
	// query array param filter[project]
	if err := r.SetQueryParam("filter[project]", joinedFilterProject...); err != nil {
		return err
	}

	valuesFilterVulnerability := o.FilterVulnerability

	joinedFilterVulnerability := swag.JoinByFormat(valuesFilterVulnerability, "multi")
	// query array param filter[vulnerability]
	if err := r.SetQueryParam("filter[vulnerability]", joinedFilterVulnerability...); err != nil {
		return err
	}

	valuesFilterWorkspace := o.FilterWorkspace

	joinedFilterWorkspace := swag.JoinByFormat(valuesFilterWorkspace, "multi")
	// query array param filter[workspace]
	if err := r.SetQueryParam("filter[workspace]", joinedFilterWorkspace...); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.Size != nil {

		// query param size
		var qrSize int32
		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {
			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}

	}

	valuesSort := o.Sort

	joinedSort := swag.JoinByFormat(valuesSort, "multi")
	// query array param sort
	if err := r.SetQueryParam("sort", joinedSort...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
