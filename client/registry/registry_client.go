// Code generated by go-swagger; DO NOT EDIT.

package registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new registry API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for registry API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetLibraryUsingGET gets library
*/
func (a *Client) GetLibraryUsingGET(params *GetLibraryUsingGETParams) (*GetLibraryUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLibraryUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLibraryUsingGET",
		Method:             "GET",
		PathPattern:        "/v3/libraries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLibraryUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLibraryUsingGETOK), nil

}

/*
GetLicenseUsingGET gets license
*/
func (a *Client) GetLicenseUsingGET(params *GetLicenseUsingGETParams) (*GetLicenseUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLicenseUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLicenseUsingGET",
		Method:             "GET",
		PathPattern:        "/v3/licenses/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLicenseUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLicenseUsingGETOK), nil

}

/*
GetVulnerabilityUsingGET gets vulnerability
*/
func (a *Client) GetVulnerabilityUsingGET(params *GetVulnerabilityUsingGETParams) (*GetVulnerabilityUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVulnerabilityUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVulnerabilityUsingGET",
		Method:             "GET",
		PathPattern:        "/v3/vulnerabilities/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVulnerabilityUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVulnerabilityUsingGETOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
