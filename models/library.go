// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Library Library
// swagger:model Library
type Library struct {

	// links
	Links []*Link `json:"_links" xml:"link"`

	// direct
	Direct bool `json:"direct,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// language
	// Enum: [java js ruby python go php objectivec cpp csharp]
	Language string `json:"language,omitempty"`

	// latest version
	LatestVersion string `json:"latest_version,omitempty"`

	// latest version release date
	// Format: date-time
	LatestVersionReleaseDate strfmt.DateTime `json:"latest_version_release_date,omitempty"`

	// licenses
	Licenses []*License `json:"licenses"`

	// line count
	LineCount int64 `json:"line_count,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// release date
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"release_date,omitempty"`

	// transitive
	Transitive bool `json:"transitive,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this library
func (m *Library) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestVersionReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Library) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	for i := 0; i < len(m.Links); i++ {
		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {
			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("_links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var libraryTypeLanguagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["java","js","ruby","python","go","php","objectivec","cpp","csharp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		libraryTypeLanguagePropEnum = append(libraryTypeLanguagePropEnum, v)
	}
}

const (

	// LibraryLanguageJava captures enum value "java"
	LibraryLanguageJava string = "java"

	// LibraryLanguageJs captures enum value "js"
	LibraryLanguageJs string = "js"

	// LibraryLanguageRuby captures enum value "ruby"
	LibraryLanguageRuby string = "ruby"

	// LibraryLanguagePython captures enum value "python"
	LibraryLanguagePython string = "python"

	// LibraryLanguageGo captures enum value "go"
	LibraryLanguageGo string = "go"

	// LibraryLanguagePhp captures enum value "php"
	LibraryLanguagePhp string = "php"

	// LibraryLanguageObjectivec captures enum value "objectivec"
	LibraryLanguageObjectivec string = "objectivec"

	// LibraryLanguageCpp captures enum value "cpp"
	LibraryLanguageCpp string = "cpp"

	// LibraryLanguageCsharp captures enum value "csharp"
	LibraryLanguageCsharp string = "csharp"
)

// prop value enum
func (m *Library) validateLanguageEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, libraryTypeLanguagePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Library) validateLanguage(formats strfmt.Registry) error {

	if swag.IsZero(m.Language) { // not required
		return nil
	}

	// value enum
	if err := m.validateLanguageEnum("language", "body", m.Language); err != nil {
		return err
	}

	return nil
}

func (m *Library) validateLatestVersionReleaseDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LatestVersionReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("latest_version_release_date", "body", "date-time", m.LatestVersionReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Library) validateLicenses(formats strfmt.Registry) error {

	if swag.IsZero(m.Licenses) { // not required
		return nil
	}

	for i := 0; i < len(m.Licenses); i++ {
		if swag.IsZero(m.Licenses[i]) { // not required
			continue
		}

		if m.Licenses[i] != nil {
			if err := m.Licenses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("licenses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Library) validateReleaseDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("release_date", "body", "date-time", m.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Library) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Library) UnmarshalBinary(b []byte) error {
	var res Library
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
