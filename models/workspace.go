// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Workspace Workspace
// swagger:model Workspace
type Workspace struct {

	// links
	Links []*Link `json:"_links" xml:"link"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// last scan date
	// Format: date-time
	LastScanDate strfmt.DateTime `json:"last_scan_date,omitempty"`

	// library issues count
	LibraryIssuesCount int32 `json:"library_issues_count,omitempty"`

	// license issues count
	LicenseIssuesCount int32 `json:"license_issues_count,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// projects count
	ProjectsCount int32 `json:"projects_count,omitempty"`

	// sandbox
	Sandbox bool `json:"sandbox,omitempty"`

	// total issues count
	TotalIssuesCount int32 `json:"total_issues_count,omitempty"`

	// vulnerability issues count
	VulnerabilityIssuesCount int32 `json:"vulnerability_issues_count,omitempty"`
}

// Validate validates this workspace
func (m *Workspace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastScanDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Workspace) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	for i := 0; i < len(m.Links); i++ {
		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {
			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("_links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Workspace) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Workspace) validateLastScanDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastScanDate) { // not required
		return nil
	}

	if err := validate.FormatOf("last_scan_date", "body", "date-time", m.LastScanDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Workspace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Workspace) UnmarshalBinary(b []byte) error {
	var res Workspace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
