// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Issue Issue
// swagger:model Issue
type Issue struct {

	// links
	Links []*Link `json:"_links" xml:"link"`

	// created date
	// Format: date-time
	CreatedDate strfmt.DateTime `json:"created_date,omitempty"`

	// fixed scan
	FixedScan *Scan `json:"fixed_scan,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// ignored
	Ignored bool `json:"ignored,omitempty"`

	// issue status
	// Enum: [fixed open]
	IssueStatus string `json:"issue_status,omitempty"`

	// issue type
	// Enum: [library license vulnerability]
	IssueType string `json:"issue_type,omitempty"`

	// library
	Library *Library `json:"library,omitempty"`

	// Only set for issue_type=library
	// Format: date-time
	LibraryUpdatedReleaseDate strfmt.DateTime `json:"library_updated_release_date,omitempty"`

	// Only set for issue_type=library
	LibraryUpdatedVersion string `json:"library_updated_version,omitempty"`

	// Only set for issue_type=license
	License *License `json:"license,omitempty"`

	// Only set for issue_type=license
	LicenseCount int32 `json:"license_count,omitempty"`

	// opened scan
	OpenedScan *Scan `json:"opened_scan,omitempty"`

	// project branch
	ProjectBranch string `json:"project_branch,omitempty"`

	// project id
	// Format: uuid
	ProjectID strfmt.UUID `json:"project_id,omitempty"`

	// project name
	ProjectName string `json:"project_name,omitempty"`

	// project tag
	ProjectTag string `json:"project_tag,omitempty"`

	// severity
	Severity float32 `json:"severity,omitempty"`

	// site id
	SiteID int64 `json:"site_id,omitempty"`

	// Only set for issue_type=vulnerability
	Vulnerability *Vulnerability `json:"vulnerability,omitempty"`

	// Only set for issue_type=vulnerability
	VulnerableMethod bool `json:"vulnerable_method,omitempty"`

	// workspace id
	// Format: uuid
	WorkspaceID strfmt.UUID `json:"workspace_id,omitempty"`
}

// Validate validates this issue
func (m *Issue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFixedScan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssueStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssueType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibrary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLibraryUpdatedReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicense(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenedScan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVulnerability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspaceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Issue) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	for i := 0; i < len(m.Links); i++ {
		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {
			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("_links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Issue) validateCreatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("created_date", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Issue) validateFixedScan(formats strfmt.Registry) error {

	if swag.IsZero(m.FixedScan) { // not required
		return nil
	}

	if m.FixedScan != nil {
		if err := m.FixedScan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fixed_scan")
			}
			return err
		}
	}

	return nil
}

func (m *Issue) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

var issueTypeIssueStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fixed","open"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		issueTypeIssueStatusPropEnum = append(issueTypeIssueStatusPropEnum, v)
	}
}

const (

	// IssueIssueStatusFixed captures enum value "fixed"
	IssueIssueStatusFixed string = "fixed"

	// IssueIssueStatusOpen captures enum value "open"
	IssueIssueStatusOpen string = "open"
)

// prop value enum
func (m *Issue) validateIssueStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, issueTypeIssueStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Issue) validateIssueStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.IssueStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateIssueStatusEnum("issue_status", "body", m.IssueStatus); err != nil {
		return err
	}

	return nil
}

var issueTypeIssueTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["library","license","vulnerability"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		issueTypeIssueTypePropEnum = append(issueTypeIssueTypePropEnum, v)
	}
}

const (

	// IssueIssueTypeLibrary captures enum value "library"
	IssueIssueTypeLibrary string = "library"

	// IssueIssueTypeLicense captures enum value "license"
	IssueIssueTypeLicense string = "license"

	// IssueIssueTypeVulnerability captures enum value "vulnerability"
	IssueIssueTypeVulnerability string = "vulnerability"
)

// prop value enum
func (m *Issue) validateIssueTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, issueTypeIssueTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Issue) validateIssueType(formats strfmt.Registry) error {

	if swag.IsZero(m.IssueType) { // not required
		return nil
	}

	// value enum
	if err := m.validateIssueTypeEnum("issue_type", "body", m.IssueType); err != nil {
		return err
	}

	return nil
}

func (m *Issue) validateLibrary(formats strfmt.Registry) error {

	if swag.IsZero(m.Library) { // not required
		return nil
	}

	if m.Library != nil {
		if err := m.Library.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("library")
			}
			return err
		}
	}

	return nil
}

func (m *Issue) validateLibraryUpdatedReleaseDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LibraryUpdatedReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("library_updated_release_date", "body", "date-time", m.LibraryUpdatedReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Issue) validateLicense(formats strfmt.Registry) error {

	if swag.IsZero(m.License) { // not required
		return nil
	}

	if m.License != nil {
		if err := m.License.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license")
			}
			return err
		}
	}

	return nil
}

func (m *Issue) validateOpenedScan(formats strfmt.Registry) error {

	if swag.IsZero(m.OpenedScan) { // not required
		return nil
	}

	if m.OpenedScan != nil {
		if err := m.OpenedScan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("opened_scan")
			}
			return err
		}
	}

	return nil
}

func (m *Issue) validateProjectID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.FormatOf("project_id", "body", "uuid", m.ProjectID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Issue) validateVulnerability(formats strfmt.Registry) error {

	if swag.IsZero(m.Vulnerability) { // not required
		return nil
	}

	if m.Vulnerability != nil {
		if err := m.Vulnerability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vulnerability")
			}
			return err
		}
	}

	return nil
}

func (m *Issue) validateWorkspaceID(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkspaceID) { // not required
		return nil
	}

	if err := validate.FormatOf("workspace_id", "body", "uuid", m.WorkspaceID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Issue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Issue) UnmarshalBinary(b []byte) error {
	var res Issue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
